<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.10.0">Jekyll</generator><link href="https://huhumt.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://huhumt.github.io/" rel="alternate" type="text/html" /><updated>2025-04-21T16:40:58-05:00</updated><id>https://huhumt.github.io/feed.xml</id><subtitle>This is my own small site</subtitle><entry><title type="html">Write interrupt safe function</title><link href="https://huhumt.github.io/programming/2021/10/27/interrupt-safe-function.html" rel="alternate" type="text/html" title="Write interrupt safe function" /><published>2021-10-27T07:32:23-05:00</published><updated>2021-10-27T07:32:23-05:00</updated><id>https://huhumt.github.io/programming/2021/10/27/interrupt-safe-function</id><content type="html" xml:base="https://huhumt.github.io/programming/2021/10/27/interrupt-safe-function.html"><![CDATA[<p>如何保证主函数被中断函数打断后正常运行？
先看如下的例子：</p>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">static</span> <span class="k">volatile</span> <span class="kt">uint8_t</span> <span class="n">g_ucIntCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">RTC_ISR</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">interrupt</span> <span class="mi">5</span>
<span class="p">{</span>
    <span class="n">g_ucIntCnt</span><span class="o">++</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>                      <span class="o">|</span>  <span class="kt">void</span> <span class="n">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>                                    <span class="o">|</span>  <span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>                        <span class="o">|</span>      <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>                                <span class="o">|</span>      <span class="p">{</span>
        <span class="n">do_something1</span><span class="p">();</span>             <span class="o">|</span>          <span class="n">do_something1</span><span class="p">();</span>
                                     <span class="o">|</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">g_ucIntCnt</span> <span class="o">==</span> <span class="mi">100</span><span class="p">)</span>       <span class="o">|</span>          <span class="k">if</span> <span class="p">(</span><span class="n">g_ucIntCnt</span> <span class="o">&gt;=</span> <span class="mi">100</span><span class="p">)</span>
        <span class="p">{</span>                            <span class="o">|</span>          <span class="p">{</span>
            <span class="n">do_something2</span><span class="p">();</span>         <span class="o">|</span>              <span class="n">do_something2</span><span class="p">();</span>
        <span class="p">}</span>                            <span class="o">|</span>              <span class="n">g_ucIntCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                                     <span class="o">|</span>          <span class="p">}</span>
        <span class="n">g_ucIntCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>              <span class="o">|</span>
        <span class="n">do_something3</span><span class="p">();</span>             <span class="o">|</span>          <span class="n">do_something3</span><span class="p">();</span>
    <span class="p">}</span>                                <span class="o">|</span>      <span class="p">}</span>
<span class="p">}</span>                                    <span class="o">|</span>  <span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="n">loop</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>请思考一下，程序中的 do_something2 会按预期每隔 100 个 rtc 单位运行一次吗？<br />
左边的代码中：<br /></p>
<ol>
  <li>由于 do_something1 的代码复杂度未知，很大概率无法撞上 g_ucIntCnt = 100 的条件；<br /></li>
  <li>另一方面，如果 do_something1 很短，在主循环中，在 g_ucIntCnt 还很小时过早清 0，也会导致无法满足条件；<br /></li>
  <li>即使刚好凑巧，可以运行到 do_something2，假如函数内部有用到 g_ucIntCnt 也会导致程序错误。<br /></li>
</ol>

<p>右边的代码中：<br /></p>
<ol>
  <li>如果 do_something1 过于复杂，导致运行完之后 g_ucIntCnt 已经溢出，也无法运行 do_something2；<br /></li>
  <li>同样有左边代码 3 的问题。<br /></li>
</ol>

<figure class="highlight"><pre><code class="language-c" data-lang="c"><span class="k">static</span> <span class="k">volatile</span> <span class="kt">uint8_t</span> <span class="n">g_ucIntCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
<span class="k">static</span> <span class="k">volatile</span> <span class="kt">uint8_t</span> <span class="n">g_ucIntCntFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>

<span class="kt">void</span> <span class="n">RTC_ISR</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span> <span class="n">interrupt</span> <span class="mi">5</span>
<span class="p">{</span>
    <span class="n">g_ucIntCnt</span><span class="o">++</span><span class="p">;</span>

    <span class="k">if</span> <span class="p">(</span><span class="n">g_ucIntCnt</span> <span class="o">==</span> <span class="mi">100</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">g_ucIntCntFlag</span> <span class="o">=</span> <span class="mi">1</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">loop</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="k">while</span> <span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">do_something1</span><span class="p">();</span>

        <span class="k">if</span> <span class="p">(</span><span class="n">g_ucIntCntFlag</span><span class="p">)</span>
        <span class="p">{</span>
            <span class="n">do_something2</span><span class="p">();</span>
            <span class="n">g_ucIntCnt</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
            <span class="n">g_ucIntCntFlag</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">do_something3</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">init</span><span class="p">();</span>
    <span class="n">loop</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>]]></content><author><name></name></author><category term="Programming" /><summary type="html"><![CDATA[如何保证主函数被中断函数打断后正常运行？ 先看如下的例子： static volatile uint8_t g_ucIntCnt = 0; void RTC_ISR(void) interrupt 5 { g_ucIntCnt++; } void loop(void) | void loop(void) { | { while (1) | while (1) { | { do_something1(); | do_something1(); | if (g_ucIntCnt == 100) | if (g_ucIntCnt &gt;= 100) { | { do_something2(); | do_something2(); } | g_ucIntCnt = 0; | } g_ucIntCnt = 0; | do_something3(); | do_something3(); } | } } | } void main(void) { init(); loop(); } 请思考一下，程序中的 do_something2 会按预期每隔 100 个 rtc 单位运行一次吗？ 左边的代码中： 由于 do_something1 的代码复杂度未知，很大概率无法撞上 g_ucIntCnt = 100 的条件； 另一方面，如果 do_something1 很短，在主循环中，在 g_ucIntCnt 还很小时过早清 0，也会导致无法满足条件； 即使刚好凑巧，可以运行到 do_something2，假如函数内部有用到 g_ucIntCnt 也会导致程序错误。 右边的代码中： 如果 do_something1 过于复杂，导致运行完之后 g_ucIntCnt 已经溢出，也无法运行 do_something2； 同样有左边代码 3 的问题。 static volatile uint8_t g_ucIntCnt = 0; static volatile uint8_t g_ucIntCntFlag = 0; void RTC_ISR(void) interrupt 5 { g_ucIntCnt++; if (g_ucIntCnt == 100) { g_ucIntCntFlag = 1; } } void loop(void) { while (1) { do_something1(); if (g_ucIntCntFlag) { do_something2(); g_ucIntCnt = 0; g_ucIntCntFlag = 0; } do_something3(); } } void main(void) { init(); loop(); }]]></summary></entry><entry><title type="html">How to make a bread?</title><link href="https://huhumt.github.io/life/2021/10/26/make-bread.html" rel="alternate" type="text/html" title="How to make a bread?" /><published>2021-10-26T07:27:23-05:00</published><updated>2021-10-26T07:27:23-05:00</updated><id>https://huhumt.github.io/life/2021/10/26/make-bread</id><content type="html" xml:base="https://huhumt.github.io/life/2021/10/26/make-bread.html"><![CDATA[<p>Few years ago, I watched a series of BBC documentary of
“<a href="https://www.imdb.com/title/tt2795962/">Paul Hollywood’s Bread</a>” and impressed me much.
Then I try to make my own bread today, followed the guidance of <a href="https://www.paulhollywood.com/post/apricot-couronne">apricot-couronne</a>,
and successfully make a beautiful bread.</p>]]></content><author><name></name></author><category term="Life" /><summary type="html"><![CDATA[Few years ago, I watched a series of BBC documentary of “Paul Hollywood’s Bread” and impressed me much. Then I try to make my own bread today, followed the guidance of apricot-couronne, and successfully make a beautiful bread.]]></summary></entry><entry><title type="html">Hello world</title><link href="https://huhumt.github.io/public/2021/10/26/hello-world.html" rel="alternate" type="text/html" title="Hello world" /><published>2021-10-26T03:27:13-05:00</published><updated>2021-10-26T03:27:13-05:00</updated><id>https://huhumt.github.io/public/2021/10/26/hello-world</id><content type="html" xml:base="https://huhumt.github.io/public/2021/10/26/hello-world.html"><![CDATA[<p>As a software engineer, my first blog should start with a “Hello world” program.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">hello_world</span><span class="p">()</span>
  <span class="nb">puts</span> <span class="s2">"Hello world"</span>
<span class="k">end</span>
<span class="n">hello_world</span><span class="p">()</span>
<span class="c1">#=&gt; prints 'Hello world' to STDOUT.</span></code></pre></figure>

<p>Another good examples for “<a href="https://github.com/leachim6/hello-world">Hello world</a>”.</p>]]></content><author><name></name></author><category term="Public" /><summary type="html"><![CDATA[As a software engineer, my first blog should start with a “Hello world” program. def hello_world() puts "Hello world" end hello_world() #=&gt; prints 'Hello world' to STDOUT. Another good examples for “Hello world”.]]></summary></entry></feed>